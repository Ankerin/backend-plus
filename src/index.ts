import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
config();

import { App } from './app';
import { DatabaseConnection } from './utils/database';
import { Logger } from './utils/logger';

class ServerBootstrap {
  private readonly logger: Logger;
  private readonly database: DatabaseConnection;
  private app: App;

  constructor() {
    this.logger = Logger.getInstance();
    this.database = DatabaseConnection.getInstance();
    this.app = new App();
    
    this.setupProcessHandlers();
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
   */
  public async start(): Promise<void> {
    try {
      this.logger.info('üöÄ Starting Astrolune API Server...');
      
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.connectToDatabase();
      
      // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      await this.app.start();
      
      this.logger.info('‚úÖ Server started successfully');
      
    } catch (error) {
      this.logger.error('‚ùå Failed to start server', error as Error);
      await this.gracefulShutdown(1);
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async connectToDatabase(): Promise<void> {
    try {
      await this.database.connect();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
      const healthCheck = await this.database.healthCheck();
      this.logger.info('Database health check:', { status: healthCheck.status });
      
    } catch (error) {
      this.logger.error('Database connection failed', error as Error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  private setupProcessHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    process.on('uncaughtException', (error: Error) => {
      this.logger.error('Uncaught Exception! Shutting down...', error);
      this.gracefulShutdown(1);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
    process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
      this.logger.error('Unhandled Rejection! Shutting down...', reason);
      this.gracefulShutdown(1);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const shutdownSignals: NodeJS.Signals[] = ['SIGTERM', 'SIGINT', 'SIGUSR2'];
    
    shutdownSignals.forEach(signal => {
      process.on(signal, () => {
        this.logger.info(`Received ${signal}, initiating graceful shutdown...`);
        this.gracefulShutdown(0);
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    process.on('warning', (warning) => {
      this.logger.warn('Process warning:', {
        name: warning.name,
        message: warning.message,
        stack: warning.stack
      });
    });
  }

  /**
   * Graceful shutdown
   */
  private async gracefulShutdown(exitCode: number): Promise<void> {
    this.logger.info('Initiating graceful shutdown...');

    try {
      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.database.disconnect();
      this.logger.info('Database disconnected');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
      this.logger.info('Cleanup completed');
      
    } catch (error) {
      this.logger.error('Error during graceful shutdown', error as Error);
    } finally {
      this.logger.info('Graceful shutdown completed');
      process.exit(exitCode);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const bootstrap = new ServerBootstrap();
bootstrap.start().catch((error) => {
  console.error('Fatal error during server startup:', error);
  process.exit(1);
});